var async = require('async');
var esut = require('easy_util');
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;

var config = require('mcp_config');
var errCode = config.ec;
var prop = config.prop;
var game = config.game;

var log = esut.log;
var pageUtil = esut.pageUtil;

var dao = require('mcp_dao');
var dc = dao.dc;

var cons = require('mcp_cons');
var ticketStatus = cons.ticketStatus;
var printStatus = cons.printStatus;
var userType = cons.userType;
var orderStatus = cons.orderStatus;
var gameType = cons.gameType;

var service = require('mcp_service');
var orderService = service.orderSer;
var ticketService = service.ticketSer;
var stationService = service.stationSer;
var digestService = service.digestSer;
var notifySer = service.notifySer;
var queenSer = service.queenSer;


var AccountControl = function(){
    var self = this;
    self.cmd = {'A01':1, 'A02':2, 'A03':3, 'A04':4};
    self.cmdArray = [{},
        {id:1, code:'A01', fromType:prop.digestFromType.NONE, des:"用户注册"},
        {id:2, code:'A02', fromType:prop.digestFromType.NONE, des:""},
        {id:3, code:'A03', fromType:prop.digestFromType.NONE, des:""},
        {id:4, code:'A04', fromType:prop.digestFromType.NONE, des:"用户登录"}
    ];
};

AccountControl.prototype.handle = function(headNode, bodyStr, userCb)
{
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function(cb)
        {
            var cmd = self.cmd[headNode.cmd];
            if(cmd == undefined)
            {
                cb(ec.E9000);
            }
            else
            {
                cb(null);
            }
        },
        //获得密钥
        function(cb)
        {
            var cmd = self.cmdArray[self.cmd[headNode.cmd]];
            var userTypeId = userType.CHANNEL;
            digestService.getKey({fromType:cmd.fromType, userId:headNode.channelCode, userType:userTypeId},
            function(err, key){
                cb(err, key);
            });
        },
        //先解密
        function(key, cb)
        {
            log.info(key);
            if(headNode.cmd == 'A01' || headNode.cmd == 'A04')
            {
                var bodyNode = JSON.parse(bodyStr);
                cb(null, bodyNode);
            }
            else
            {
                var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
                if(decodedBodyStr == null)
                {
                    cb(ec.E9003);
                    return;
                }
                var bodyNode;
                try {
                    bodyNode = JSON.parse(decodedBodyStr);
                    headNode.key = key;
                }
                catch (err)
                {
                    cb(ec.E9003);
                    return;
                }
                cb(null, bodyNode);
            }
        },
        //check the param
        function(bodyNode, cb){
            var method = 'check' + headNode.cmd;
            self[method](null, headNode, bodyNode, function(err){
                cb(err, bodyNode);
            });
        },
        //业务处理
        function(bodyNode, cb){
            var cmd = 'handle' + headNode.cmd;
            self[cmd](null, headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};

AccountControl.prototype.checkA01 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AccountControl.prototype.checkA04 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AccountControl.prototype.handleA01 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var table = dc.main.get("customer");
    var customer = bodyNode.customer;
    async.waterfall([
        //新建用户
        function(cb)
        {
            log.info(bodyNode);
            var customerToSave = {
                id:digestUtil.createUUID(), name:customer.name,
                password:customer.password, recharge:0, integral:0,
                channelCode:headNode.channelCode
            }
            table.save(customerToSave, [], function(err, data){
                cb(err, customerToSave);
            });
        },
        //查找用户所属渠道
        function(customerToSave, cb)
        {
            var sTable = dc.main.get("station");
            var cond = {code:headNode.channelCode};
            sTable.findOne(cond, {}, [], function(err, data){
                cb(err, customerToSave, data);
            });
        },
        //新建用户账户
        function(customer, station, cb)
        {
            var account = {
                id:digestUtil.createUUID(), customerId:customer.id,
                stationId:station.id, recharge:0, prize:0, integral:0,
                status:0
            };
            var aTable = dc.main.get("customeraccount");
            aTable.save(account, [], function(err, data){
                cb(err);
            });
        }
    ], function (err) {
        cb(err, backBodyNode);
    });
};

/**
 * 用户登录
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AccountControl.prototype.handleA04 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var table = dc.main.get("customer");
    var name = bodyNode.name;
    var password = bodyNode.password;
    async.waterfall([
        //查找用户
        function(cb)
        {
            var cond = {
                channelCode:headNode.channelCode, name:name
            }
            table.findOne(cond, {}, [], function(err, data){
                cb(err, data);
            })
        },
        function(customer, cb)
        {
            var lTable = dc.mg.get("cus_login");
            var st = digestUtil.createUUID();
            var obj = {
                _id:customer.id, st:st,
                lastActiveTime:new Date()
            };
            lTable.save(obj, [], function(err, data){
                backBodyNode.st = st;
                backBodyNode.customer = customer;
                cb(err);
            });
        }
    ], function (err) {
        cb(err, backBodyNode);
    });
};

module.exports = new AccountControl();