var esut = require('easy_util');
var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;

var dao = require('mcp_dao');
var dc = dao.dc;

var config = require('mcp_config');
var prop = config.prop;
var game = config.game;

var async = require('async');

var cons = require('mcp_cons');
var termStatus = cons.termStatus;
var gameGrade = cons.gameGrade;
var termReportType = cons.termReportType;
var orderType = cons.orderType;

var TermPageControl = function(){};

TermPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    console.log(bodyNode);
    var self = this;
    var cmd = headNode.cmd;
    self[cmd[1]](headNode, bodyNode, cb);
};

TermPageControl.prototype.detail = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"期次详情"};
    backBodyNode.termStatus = termStatus.getInfoById();
    backBodyNode.game = game.getInfo();
    var table = dc.main.get("term");
    table.findOne({id:bodyNode.id}, {}, [], function(err, data){
        backBodyNode.term = data;
        cb(null, backBodyNode);
    }, {dateToString:true});
};

TermPageControl.prototype.list = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view terms"};
    backBodyNode.sort = {gameCode:1, code:-1};
    pageUtil.parse(bodyNode, backBodyNode);
    backBodyNode.games = game.getInfo();
    backBodyNode.termStatusObj = termStatus;
    backBodyNode.termStatus = termStatus.getInfoById();
    var termTable = dc.main.get("term");
    var cursor = termTable.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).limit(backBodyNode.skip, backBodyNode.limit);
    cursor.dateToString();
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
            dateUtil.mysqlObj(termTable, set);
            set.game = game.getInfo(set.gameCode);
            set.status = termStatus.getInfoById(set.status);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};

TermPageControl.prototype.add = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view terms"};
    backBodyNode.game = game.getInfo();
    backBodyNode.termStatus = termStatus.getInfoById();
    backBodyNode.curTime = dateUtil.getCurTime();
    cb(null, backBodyNode);
};


TermPageControl.prototype.sealList = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"期次封存信息"};
    backBodyNode.sort = {sTime:-1};
    pageUtil.parse(bodyNode, backBodyNode);
    var add = backBodyNode.add;
    if(add.endTime == undefined)
    {
        add.endTime = dateUtil.getCurTime();
    }
    var cond = backBodyNode.cond;
    cond.sTime = {};
    cond.sTime.$lte = dateUtil.toDate(add.endTime);
    if(add.startTime != undefined)
    {
        cond.sTime.$gte = dateUtil.toDate(add.startTime);
    }
    var table = dc.mg.get("term_seal_info");
    var cursor = table.find(cond, {}, []).sort(backBodyNode.sort).skip(backBodyNode.skip).limit(backBodyNode.limit);
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
            set.sTime = dateUtil.toString(set.sTime);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};


TermPageControl.prototype.saleReport = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"期次封存信息"};
    backBodyNode.sort = {id:-1};
    pageUtil.parse(bodyNode, backBodyNode);
    var cond = backBodyNode.cond;
    backBodyNode.games = game.getInfo();
    backBodyNode.termReportType = termReportType.getInfoById();

    var colName = "term_report";
    var conn = dc.mg.getConn();
    var table = conn.collection(colName);
    var cursor = table.find(cond, {}, []).sort(backBodyNode.sort).skip(backBodyNode.skip).limit(backBodyNode.limit);
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
            set.rptType = termReportType.getInfoById(set.rptType);
            set.type = orderType.getInfoById(set.type);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};


TermPageControl.prototype.draw = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"期次开奖"};
    backBodyNode.termStatus = termStatus.getInfoById();
    backBodyNode.game = game.getInfo();
    async.waterfall([
        function(cb)
        {
            var table = dc.main.get("term");
            table.findOne({id:bodyNode.id}, {}, [], function(err, data){
                backBodyNode.term = data;
                cb(err, data);
            }, {dateToString:true});
        },
        function(term, cb)
        {
            if(term.prizeDesc != null && term.prizeDesc.length > 0)
            {
                backBodyNode.rst = JSON.parse(term.prizeDesc).grades;
            }
            else
            {
                backBodyNode.rst = gameGrade.getInfoById(term.gameCode).grades;
            }
            cb(null, null);
        }
    ], function (err, result) {
        log.info(backBodyNode);
        cb(err, backBodyNode);
    });
}

TermPageControl.prototype.drawConfirm = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"期次开奖"};
    backBodyNode.termStatus = termStatus.getInfoById();
    backBodyNode.game = game.getInfo();
    async.waterfall([
        function(cb)
        {
            var table = dc.main.get("term");
            table.findOne({id:bodyNode.id}, {}, [], function(err, data){
                backBodyNode.term = data;
                cb(err, data);
            }, {dateToString:true});
        },
        function(term, cb)
        {
            backBodyNode.rst = JSON.parse(term.prizeDesc).grades;
            cb(null, null);
        }
    ], function (err, result) {
        log.info(backBodyNode);
        cb(err, backBodyNode);
    });
}

TermPageControl.prototype.logList = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"期次操作日志"};
    backBodyNode.sort = {hTime:-1};
    pageUtil.parse(bodyNode, backBodyNode);
    backBodyNode.games = game.getInfo();
    var add = backBodyNode.add;
    if(add.gameCode == undefined || add.termCode == undefined)
    {
        backBodyNode.rst = [];
        backBodyNode.count = 0;
        cb(null, backBodyNode);
    }
    else
    {
        async.waterfall([
            function(cb)
            {
                var table = dc.main.get("term");
                var cond = {gameCode:add.gameCode, code:add.termCode};
                table.findOne(cond, {}, [], function(err, data){
                    cb(err, data);
                });
            },
            function(term, cb)
            {
                if(term)
                {
                    var cond = backBodyNode.cond;
                    cond.termId = term.id;
                    var table = dc.main.get("termlog");
                    var cursor = table.find(cond, {}, []).sort(backBodyNode.sort).limit(backBodyNode.skip, backBodyNode.limit);
                    cursor.dateToString();
                    cursor.toArray(function(err, data){
                        for(var key in data)
                        {
                            var set = data[key];
                            set.gameCode = add.gameCode;
                            set.termCode = add.termCode;
                        }
                        backBodyNode.rst = data;
                        backBodyNode.count = cursor.count(function(err, count){
                            backBodyNode.count = count;
                            cb(null);
                        });
                    });
                }
                else
                {
                    backBodyNode.rst = [];
                    backBodyNode.count = 0;
                    cb(null);
                }
            }
        ], function (err, result) {
            cb(err, backBodyNode);
        });
    }
};

module.exports = new TermPageControl();