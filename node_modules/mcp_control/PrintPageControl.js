var esut = require('easy_util');
var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;

var dao = require('mcp_dao');
var dc = dao.dc;

var config = require('mcp_config');
var prop = config.prop;
var game = config.game;

var async = require('async');

var cons = require('mcp_cons');
var termStatus = cons.termStatus;

var PrintPageControl = function(){};

PrintPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    console.log(bodyNode);
    var self = this;
    var cmd = headNode.cmd;
    self[cmd[1]](headNode, bodyNode, cb);
};

PrintPageControl.prototype.list = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view terms"};
    backBodyNode.games = game.getInfo();
    pageUtil.parse(bodyNode, backBodyNode);
    if(backBodyNode.cond.code == undefined)
    {
        backBodyNode.rst = [];
        cb(null, backBodyNode);
    }
    else
    {
        backBodyNode.rst = [];
        var stationCode = backBodyNode.cond.code;
        var colName = 'print_queen_' + stationCode;
        var cond = {};
        if(backBodyNode.cond.gameCode)
        {
            cond.gameCode = backBodyNode.cond.gameCode;
        }
        if(backBodyNode.cond.termCode)
        {
            cond.termCode = backBodyNode.cond.termCode;
        }
        var table = dc.mg.getConn().collection(colName);
        var cursor = table.find(cond, {}, []).sort(backBodyNode.sort).skip(backBodyNode.skip).limit(backBodyNode.limit);
        cursor.toArray(function(err, data){
            for(var key in data)
            {
                var set = data[key];
                set.game = game.getInfo(set.gameCode);
            }
            backBodyNode.rst = data;
            backBodyNode.count = cursor.count(function(err, count){
                backBodyNode.count = count;
                cb(null, backBodyNode);
            });
        });
    }
};

module.exports = new PrintPageControl();