var async = require('async');
var esut = require('easy_util');
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;

var config = require('mcp_config');
var errCode = config.ec;
var prop = config.prop;
var game = config.game;

var log = esut.log;
var pageUtil = esut.pageUtil;

var dao = require('mcp_dao');
var dc = dao.dc;

var cons = require('mcp_cons');
var ticketStatus = cons.ticketStatus;
var printStatus = cons.printStatus;
var userType = cons.userType;
var orderStatus = cons.orderStatus;
var gameType = cons.gameType;
var schemeType = cons.schemeType;
var orderType = cons.orderType;
var schemeStatus = cons.schemeStatus;

var service = require('mcp_service');
var orderService = service.orderSer;
var ticketService = service.ticketSer;
var stationService = service.stationSer;
var digestService = service.digestSer;
var notifySer = service.notifySer;
var queenSer = service.queenSer;
var mgKvService = service.kvSer;

var SchemeControl = function(){
    var self = this;
    self.cmd = {'S01':1};
    self.cmdArray = [{},
        {id:1, code:'S01', fromType:prop.digestFromType.CACHE, des:"方案投注"}
    ];
};

SchemeControl.prototype.handle = function(headNode, bodyStr, userCb)
{
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function(cb)
        {
            var cmd = self.cmd[headNode.cmd];
            if(cmd == undefined)
            {
                cb(ec.E9000);
            }
            else
            {
                cb(null);
            }
        },
        //获得密钥
        function(cb)
        {
            var cmd = self.cmdArray[self.cmd[headNode.cmd]];
            var userTypeId = userType.CUSTOMER;
            digestService.getKey({fromType:cmd.fromType, userId:headNode.userId, userType:userTypeId},
            function(err, key){
                cb(err, key);
            });
        },
        //先解密
        function(key, cb)
        {
            log.info(key);
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            try {
                var bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
                cb(null, bodyNode);
            }
            catch (err)
            {
                cb(ec.E9003);
            }
        },
        //check the param
        function(bodyNode, cb){
            var method = 'check' + headNode.cmd;
            self[method](null, headNode, bodyNode, function(err){
                cb(err, bodyNode);
            });
        },
        //业务处理
        function(bodyNode, cb){
            var cmd = 'handle' + headNode.cmd;
            self[cmd](null, headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};

SchemeControl.prototype.checkS01 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


SchemeControl.prototype.handleS01 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var scheme = bodyNode.scheme;
    var table = dc.main.get("schemezh");
    var now = new Date();
    async.waterfall([
        //销售渠道
        function(cb)
        {
            var stationTable = dc.main.get("station");
            var cond = {
                code:headNode.channelCode
            }
            stationTable.findOne(cond, {}, [], function(err, data){
                cb(err, data);
            });
        },
        //查找渠道销售的游戏
        function(station, cb)
        {
            var stationGameTable = dc.main.get("stationgame");
            var cond = {
                stationId:station.id, gameCode:scheme.gameCode
            };
            stationGameTable.find(cond, {relayToId:1}).toArray(
                function(err, data){
                    cb(null, station, data[0]);
            });
        },
        //保存方案
        function(station, sg, cb)
        {
            var now = new Date();
            scheme.id = digestUtil.createUUID();
            scheme.curTermCode = scheme.startTermCode;
            scheme.acceptTime = now;
            scheme.channelCode = headNode.channelCode;
            scheme.createTime = now;
            scheme.customerId = headNode.userId;
            scheme.printStationId = sg.relayToId;
            scheme.stationId = station.id;
            scheme.status = schemeStatus.RUNNING;
            var sTable = dc.main.get("schemezh");
            sTable.save(scheme, [], function(err, data){
                cb(err, scheme);
            });
        },
        //保存票据
        function(scheme, cb)
        {
            var orderId = digestUtil.createUUID();
            var tickets = [];
            var ticketStrArray = scheme.numList.split("!");
            for(var i = 0; i < ticketStrArray.length; i++)
            {
                var ticket = {};
                var tNum = ticketStrArray[i];
                var tDetailStrNum = tNum.split('~');
                ticket.playTypeCode = tDetailStrNum[0];
                ticket.betTypeCode = tDetailStrNum[1];
                ticket.numbers = tDetailStrNum[2];
                ticket.amount = parseInt(tDetailStrNum[3]);
                ticket.multiple = parseInt(tDetailStrNum[4]);

                ticket.id = digestUtil.createUUID();
                ticket.orderId = orderId;
                ticket.seq = i;
                ticket.finishedTicketCount = 0;
                ticket.stationId = scheme.stationId;
                ticket.channelCode = scheme.channelCode;
                ticket.customerId = scheme.customerId;
                ticket.gameCode = scheme.gameCode;
                ticket.termCode = scheme.startTermCode;
                ticket.printerStationId = scheme.printStationId;
                ticket.version = 0;
                ticket.price = 200;

                ticket.createTime = now;
                ticket.acceptTime = now;
                ticket.status = ticketStatus.waiting_print;

                tickets[tickets.length] = ticket;
            }
            log.info(tickets);

            var tTable = dc.main.get("tticket");
            async.eachSeries(tickets, function(ticket, callback) {
                tTable.save(ticket, [], function(err, data){
                    callback(err);
                });
            }, function(err){
                cb(err, scheme, orderId, tickets);
            });
        },
        //保存订单
        function(scheme, orderId, tickets, cb)
        {
            var order = {
                id:orderId, gameCode:scheme.gameCode, termCode:scheme.startTermCode,
                stationId:scheme.stationId, schemeId:scheme.id, schemeType:schemeType.follow,
                channelCode:scheme.channelCode, amount:scheme.amount/scheme.orderCount,
                createTime:now, acceptTime:now, customerId:scheme.customerId, finishedTicketCount:0,
                printCount:0, printFailCount:0, multiple:1, printStationId:scheme.printStationId,
                version:0, status: orderStatus.waiting_print, ticketCount:tickets.length,
                type:orderType.customer
            };
            var oTable = dc.main.get("torder");
            oTable.save(order, [], function(err, data){
                cb(null, scheme, order, tickets);
            });
        },
        //get printer station
        function(scheme, order, tickets, cb)
        {
            var stationTable = dc.main.get("station");
            stationTable.findOne({id:scheme.printStationId}, {code:1}, [], function(err, data){
                cb(err, scheme, order, tickets, data);
            });
        },
        //发送出票通知
        function(scheme, order, tickets, pStation, cb)
        {
            var printQueen = dc.mg.pool.getConn().conn.collection("print_queen_" + pStation.code);
            mgKvService.getPrintSeqId(function(err, data){
                printQueen.save({_id:data.value, orderId:order.id,
                    gameCode:order.gameCode, termCode:order.termCode}, [], function(err, data){
                    cb(err);
                });
            });
        }
    ], function (err) {
        cb(err, backBodyNode);
    });
};

module.exports = new SchemeControl();