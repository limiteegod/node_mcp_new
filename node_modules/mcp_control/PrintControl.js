var async = require('async');
var esut = require('easy_util');
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;

var config = require('mcp_config');
var errCode = config.ec;
var prop = config.prop;
var game = config.game;

var log = esut.log;
var pageUtil = esut.pageUtil;

var dao = require('mcp_dao');
var dc = dao.dc;

var cons = require('mcp_cons');
var ticketStatus = cons.ticketStatus;
var printStatus = cons.printStatus;
var userType = cons.userType;
var orderStatus = cons.orderStatus;
var gameType = cons.gameType;

var service = require('mcp_service');
var orderService = service.orderSer;
var ticketService = service.ticketSer;
var stationService = service.stationSer;
var digestService = service.digestSer;
var notifySer = service.notifySer;
var queenSer = service.queenSer;


var PrintControl = function(){
    var self = this;
    self.cmd = {'P01':1, 'P02':2, 'P03':3, 'P04':4, 'P05':5, 'P06':6,
        'P07':7, 'P08':8, 'P09':9, 'P10':10, 'P11':11, 'P12':12};
    self.cmdArray = [{},
        {id:1, code:'P01', fromType:prop.digestFromType.DB, des:"管理员登陆"},
        {id:2, code:'P02', fromType:prop.digestFromType.FIX, des:'获得权限菜单'},
        {id:3, code:'P03', fromType:prop.digestFromType.CACHE, des:'添加投注站'},
        {id:4, code:'P04', fromType:prop.digestFromType.CACHE, des:'修改投注站'},
        {id:5, code:'P05', fromType:prop.digestFromType.CACHE, des:'添加期次'},
        {id:6, code:'P06', fromType:prop.digestFromType.FIX, des:'按订单取票'},
        {id:7, code:'P07', fromType:prop.digestFromType.CACHE, des:'修改期次'},
        {id:8, code:'P08', fromType:prop.digestFromType.CACHE, des:'修改机构游戏'},
        {id:9, code:'P09', fromType:prop.digestFromType.CACHE, des:'账户操作'},
        {id:10, code:'P10', fromType:prop.digestFromType.CACHE, des:'修改渠道mg密钥'},
        {id:11, code:'P11', fromType:prop.digestFromType.CACHE, des:'修改渠道mg密钥'},
        {id:12, code:'P12', fromType:prop.digestFromType.FIX, des:'取订单队列'}
    ];
};

PrintControl.prototype.handle = function(headNode, bodyStr, userCb)
{
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function(cb)
        {
            var cmd = self.cmd[headNode.cmd];
            if(cmd == undefined)
            {
                cb(ec.E9000);
            }
            else
            {
                cb(null);
            }
        },
        //获得密钥
        function(cb)
        {
            var cmd = self.cmdArray[self.cmd[headNode.cmd]];
            var userTypeId = userType.CHANNEL;
            digestService.getKey({fromType:cmd.fromType, userId:headNode.channelCode, userType:userTypeId},
            function(err, key){
                cb(err, key);
            });
        },
        //先解密
        function(key, cb)
        {
            log.info(key);
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            try {
                var bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
                cb(null, bodyNode);
            }
            catch (err)
            {
                cb(ec.E9003);
            }
        },
        //check the param
        function(bodyNode, cb){
            var method = 'check' + headNode.cmd;
            self[method](null, headNode, bodyNode, function(err){
                cb(err, bodyNode);
            });
        },
        //业务处理
        function(bodyNode, cb){
            var cmd = 'handle' + headNode.cmd;
            self[cmd](null, headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};

PrintControl.prototype.checkP01 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkP02 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


PrintControl.prototype.checkP03 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkP04 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkP05 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkP06 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkP12 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


/**
 * find print center's print queen.
 * bodyNode.size should bet set, if not set, it will be 10.
 * @param user the print center.
 * @param headNode
 * @param bodyNode bodyNode.rst is the result, bodyNode.pi is the page info.
 * @param cb
 */
PrintControl.prototype.handleP12 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var colName = "print_queen_" + headNode.channelCode;
    var table = dc.mg.getConn().collection(colName);
    var limit = bodyNode.size;
    var skip = 0;
    var count = 0;
    var hasNext = true;
    var rst = [];
    async.whilst(
        function() { return count < limit && hasNext},
        function(whileCb) {
            var cond = {};
            var sort = {};
            table.findAndRemove(cond, sort, [], function(err, data){
                log.info("here-------------------------");
                log.info(err);
                log.info(data);
                if(data)
                {
                    data.id = data._id;
                    delete data._id;
                    rst[rst.length] = data;
                }
                else
                {
                    hasNext = false;
                }
                count++;
                whileCb();
            });
        },
        function(err) {
            var cursor = table.find({}, {});
            cursor.count(function(err, count){
                backBodyNode.pi = pageUtil.getDetail(skip, limit, count);
                backBodyNode.rst = rst;
                cb(err, backBodyNode);
            });
        }
    );
};
/**
 * print center get tickets to print by orderId.
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
PrintControl.prototype.handleP06 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var orderId = bodyNode.orderId;
    var ticketTable = dc.main.get("tticket");
    var cursor = ticketTable.find({orderId:orderId, status:ticketStatus.waiting_print},
        {orderId:1, seq:1, termCode:1, gameCode:1, betTypeCode:1,
            playTypeCode:1, amount:1, multiple:1, price:1, numbers:1,
            termIndexDeadline:1, version:1});
    cursor.dateToString();
    cursor.toArray(function(err, data){
        var rst = [];
        var curTimeStamp = dateUtil.getCurTime();
        async.eachSeries(data, function(ticket, callback) {
            ticketTable.update({id:ticket.id, version:ticket.version},
                {$set:{sysTakeTime:curTimeStamp, status:ticketStatus.take_away,
                    version:ticket.version+1}},
                [], function(err, data){
                    if(err)
                    {
                        log.info(err);
                    }
                    else
                    {
                        if(data.affectedRows == 1)
                        {
                            ticket.version = undefined;
                            rst[rst.length] = ticket;
                        }
                    }
                    callback();
                });
        }, function(err){
            backBodyNode.tickets = rst;
            cb(null, backBodyNode);
        });
    });
};

/**
 * print center tell platform the printing status of ticket.
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
PrintControl.prototype.handleP02 = function(user, headNode, bodyNode, outerCb)
{
    var self = this;
    var backBodyNode = {};
    var ticketTable = dc.main.get("tticket");
    async.waterfall([
        //select ticket from db
        function(cb)
        {
            var cols = {amount:1, gameCode:1, status:1, version:1, orderId:1,
                termCode:1, numbers:1, createTime:1, printTime:1, channelCode:1,
                playTypeCode:1, betTypeCode:1, stationId:1, multiple:1,
                printerStationId:1};
            var cursor = ticketTable.find({id:bodyNode.ticketId}, cols);
            cursor.dateToString();
            cursor.toArray(function(err, data) {
                if (err) throw err;
                if (data.length > 0) {
                    cb(null, data[0]);
                }
                else
                {
                    cb(errCode.E3001);
                }
            });
        },
        //check the ticket status
        function(ticket, cb)
        {
            if(ticket.status != ticketStatus.take_away)
            {
                cb(errCode.E3002);
            }
            else
            {
                cb(null, ticket);
            }
        },
        //update the ticket status
        function(ticket, cb)
        {
            if(bodyNode.code == printStatus.success)
            {
                ticket.status = ticketStatus.print_success;
                ticket.rNumber = bodyNode.rNumber;
                ticket.paper = bodyNode.paper;
                ticket.terminalId = bodyNode.terminalCode;
                ticket.stubInfo = bodyNode.stubInfo;
                ticketService.printBack(ticket, function(err, data){
                    cb(err, ticket, true);
                });
            }
            else
            {
                ticket.status = ticketStatus.print_failure;
                cb("err, print failure, nothing to do", ticket, false);
            }
        },
        //出票成功，保存到算奖队列
        function(ticket, success, cb)
        {
            if(success)
            {
                queenSer.ticketSuc(ticket, function(err, data){
                    cb(err, ticket, success);
                })
            }
            else
            {
                cb(null, ticket, success);
            }
        },
        //increase the ticket count of torder
        function(ticket, success, cb)
        {
            if(success)
            {
                orderService.incSuccessTicketCount(ticket.orderId, function(err, order){
                    cb(err, ticket, order);
                });
            }
            else
            {
                cb(null, ticket, null);
            }
        },
        //出票成功通知
        function(ticket, order, cb)
        {
            if(order && order.status == orderStatus.success)
            {
                var tickets = [];
                tickets[0] = {id:ticket.id, rNumber:ticket.rNumber,
                    channelCode:ticket.channelCode, terminalId:ticket.terminalId};
                order.tickets = tickets;
                notifySer.sendOrder(order, function(err, data){
                    cb(err)
                });
            }
            else
            {
                cb(null);
            }
        }
    ], function (err) {
        if(err)
        {
            log.info(err);
        }
        outerCb(null, backBodyNode);
    });
};

var printControl = new PrintControl();
module.exports = printControl;