var esut = require('easy_util');
var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;

var dao = require('mcp_dao');
var dc = dao.dc;

var config = require('mcp_config');
var prop = config.prop;
var game = config.game;

var async = require('async');

var cons = require('mcp_cons');
var termStatus = cons.termStatus;
var notifyMsgStatus = cons.notifyMsgStatus;
var notifyChannelStatus = cons.notifyChannelStatus;

var NotifyPageControl = function(){};

NotifyPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    console.log(bodyNode);
    var self = this;
    var cmd = headNode.cmd;
    self[cmd[1]](headNode, bodyNode, cb);
};

NotifyPageControl.prototype.chList = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view terms"};
    backBodyNode.games = game.getInfo();
    pageUtil.parse(bodyNode, backBodyNode);
    var table = dc.mg.get("notify_channel_all");
    var cursor = table.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).skip(backBodyNode.skip).limit(backBodyNode.limit);
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
            set.status = notifyChannelStatus.getInfoById(set.status);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};

NotifyPageControl.prototype.chDetail = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view notify channel detail"};
    var table = dc.mg.get("notify_channel_all");
    var cond = {_id:bodyNode.id};
    table.findOne(cond, {}, [], function(err, data){
        backBodyNode.rst = data;
        cb(null, backBodyNode);
    });
};

NotifyPageControl.prototype.addCh = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view notify channel detail"};
    backBodyNode.notifyChannelStatus = notifyChannelStatus.getInfoById();
    cb(null, backBodyNode);
};

NotifyPageControl.prototype.list = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"通知查询"};
    if(bodyNode.sort == undefined)
    {
        backBodyNode.sort = {createTime:-1};
    }
    pageUtil.parse(bodyNode, backBodyNode);
    backBodyNode.games = game.getInfo();
    var add = backBodyNode.add;
    var colName = 'notify_queen_' + add.channelCode;
    var table = dc.mg.getConn().collection(colName);
    var cursor = table.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).skip(backBodyNode.skip).limit(backBodyNode.limit);
    cursor.toArray(function(err, data){
        log.info(err);
        for(var key in data)
        {
            var set = data[key];
            set.status = notifyMsgStatus.getInfoById(set.status);
            set.createTime = dateUtil.toString(set.createTime);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};

module.exports = new NotifyPageControl();