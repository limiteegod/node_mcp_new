var async = require('async');

var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;

var cons = require('mcp_cons');
var stationStatus = cons.stationStatus;
var userType = cons.userType;
var ticketStatus = cons.ticketStatus;
var notifyMsgStatus = cons.notifyMsgStatus;

var dao = require('mcp_dao');
var dc = dao.dc;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;
var ac = config.ac;

var service = require('mcp_service');
var digestService = service.digestSer;
var stationService = service.stationSer;
var queenSer = service.queenSer;
var notifySer = service.notifySer;
var ticketSer = service.ticketSer;
var orderSer = service.orderSer;

var AdminControl = function(){
    var self = this;
    self.cmd = {'AD01':1, 'AD02':2, 'AD03':3, 'AD04':4, 'AD05':5, 'AD06':6,
    'AD07':7, 'AD08':8, 'AD09':9, 'AD10':10, 'AD11':11, 'AD12':12, 'AD13':13,
    'AD14':14, 'AD15':15, 'AD16':16, 'AD17':17, 'AD18':18, 'AD19':19};
    self.cmdArray = [{},
        {id:1, code:'AD01', fromType:prop.digestFromType.DB, des:"管理员登陆"},
        {id:2, code:'AD02', fromType:prop.digestFromType.CACHE, des:'获得权限菜单'},
        {id:3, code:'AD03', fromType:prop.digestFromType.CACHE, des:'添加投注站'},
        {id:4, code:'AD04', fromType:prop.digestFromType.CACHE, des:'修改投注站'},
        {id:5, code:'AD05', fromType:prop.digestFromType.CACHE, des:'添加期次'},
        {id:6, code:'AD06', fromType:prop.digestFromType.CACHE, des:'添加游戏'},
        {id:7, code:'AD07', fromType:prop.digestFromType.CACHE, des:'修改期次'},
        {id:8, code:'AD08', fromType:prop.digestFromType.CACHE, des:'修改机构游戏'},
        {id:9, code:'AD09', fromType:prop.digestFromType.CACHE, des:'账户操作'},
        {id:10, code:'AD10', fromType:prop.digestFromType.CACHE, des:'修改渠道mg密钥'},
        {id:11, code:'AD11', fromType:prop.digestFromType.CACHE, des:'票据加入算奖队列'},
        {id:12, code:'AD12', fromType:prop.digestFromType.CACHE, des:'删除成功队列'},
        {id:13, code:'AD13', fromType:prop.digestFromType.CACHE, des:'订单直接成功'},
        {id:14, code:'AD14', fromType:prop.digestFromType.CACHE, des:'再次发送通知'},
        {id:15, code:'AD15', fromType:prop.digestFromType.CACHE, des:'修改通知地址'},
        {id:16, code:'AD16', fromType:prop.digestFromType.CACHE, des:'删除渠道已发送通知'},
        {id:17, code:'AD17', fromType:prop.digestFromType.CACHE, des:'票据退款'},
        {id:18, code:'AD18', fromType:prop.digestFromType.CACHE, des:'打印失败'},
        {id:19, code:'AD19', fromType:prop.digestFromType.CACHE, des:'添加接受通知的渠道'}
    ];
};

AdminControl.prototype.handle = function(headNode, bodyStr, userCb)
{
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function(cb)
        {
            var cmd = self.cmd[headNode.cmd];
            if(cmd == undefined)
            {
                cb(ec.E9000);
            }
            else
            {
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var cmd = self.cmdArray[self.cmd[headNode.cmd]];
            digestService.getKey({fromType:cmd.fromType, userId:headNode.userId, userType:userTypeId},
            function(err, key){
                cb(err, key);
            });
        },
        //先解密
        function(key, cb)
        {
            log.info(key);
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            try {
                var bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
                cb(null, bodyNode);
            }
            catch (err)
            {
                cb(ec.E9003);
            }
        },
        //check the param
        function(bodyNode, cb){
            var method = 'check' + headNode.cmd;
            self[method](null, headNode, bodyNode, function(err){
                cb(err, bodyNode);
            });
        },
        //业务处理
        function(bodyNode, cb){
            var cmd = 'handle' + headNode.cmd;
            self[cmd](null, headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


AdminControl.prototype.checkAD01 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD02 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD03 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD04 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD05 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD06 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD07 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD08 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


AdminControl.prototype.checkAD09 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD10 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD11 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD12 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD13 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD14 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD15 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD16 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD17 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD18 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

AdminControl.prototype.checkAD19 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


/**
 * find one's all operations
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD01 = function(user, headNode, bodyNode, cb)
{
    var stInfoTable = dc.mg.get("stInfo");
    stInfoTable.findOne({_id:headNode.userId}, {}, [], function(err, data){
        if(data)
        {
            var newSt = data.st;
            var now = new Date();
            if(now.getTime() - data.lastActiveTime > prop.loginExpiredSeconds*1000)
            {
                //expired
                newSt = digestUtil.createUUID();
            }
            stInfoTable.update({_id:headNode.userId}, {$set:{lastActiveTime:new Date().getTime(), st:newSt}},
            [], function(err, data){
                cb(null, {uniqueId:bodyNode.uniqueId, st:newSt});
            });
        }
        else
        {
            var st = digestUtil.createUUID();
            stInfoTable.save({_id:headNode.userId, st:st, lastActiveTime:new Date().getTime()}, [], function(err, data){
                cb(null, {uniqueId:bodyNode.uniqueId, st:st});
            });
        }
    });
};

/**
 * save area
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD02 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var cond = bodyNode.cond;
    if(cond == undefined)
    {
        cond = {};
    }
    var operationTable = dc.main.get("operation");
    operationTable.find(cond, {}).toArray(function(err, data){
        if(data)
        {
            backBodyNode.rst = data;
        }
        cb(null, backBodyNode);
    });
};

/**
 * save area
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD03 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var station = bodyNode.station;
    station.id = digestUtil.createUUID();
    station.balance = 0;
    station.queueIndex = -1;
    station.relayable = -1;
    station.status = stationStatus.OPEN;
    station.version = 0;
    var table = dc.main.get("station");
    table.save(station, [], function(err, data){
        if(err)
        {
            log.info(err);
            cb(ec.E0999);
        }
        else
        {
            cb(err, backBodyNode);
        }
    });
};

/**
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD04 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var table = dc.main.get("station");
    table.update(bodyNode.cond, bodyNode.data, [], function(err, data){
        if(err)
        {
            log.info(err);
            cb(ec.E0999);
        }
        else
        {
            cb(err, backBodyNode);
        }
    });
};

/**
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD05 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var term = bodyNode.term;
    term.id = digestUtil.createUUID();
    term.version = 0;
    var table = dc.main.get("term");
    table.save(term, [], function(err, data){
        if(err)
        {
            log.info(err);
            cb(ec.E0999);
        }
        else
        {
            cb(err, backBodyNode);
        }
    });
};

/**
 * 添加游戏
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD06 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var game = bodyNode.game;
    game.id = digestUtil.createUUID();
    game.version = 0;
    game.offset = 0;
    game.isSynchro = 0;
    var table = dc.main.get("game");
    table.save(game, [], function(err, data){
        if(err)
        {
            log.info(err);
            cb(ec.E0999);
        }
        else
        {
            cb(err, backBodyNode);
        }
    });
};

/**
 * 修改期次
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD07 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var table = dc.main.get("term");
    table.update(bodyNode.cond, bodyNode.data, [], function(err, data){
        if(err)
        {
            log.info(err);
            cb(ec.E0999);
        }
        else
        {
            cb(err, backBodyNode);
        }
    });
};

/**
 * 修改机构游戏
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD08 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var table = dc.main.get("stationgame");
    table.update(bodyNode.cond, bodyNode.data, [], function(err, data){
        if(err)
        {
            log.info(err);
            cb(ec.E0999);
        }
        else
        {
            cb(err, backBodyNode);
        }
    });
};

/**
 * 账户操作
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD09 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var subjectId = bodyNode.subjectId;
    var subject = ac.getInfoById(subjectId);
    var role = subjectId.substr(0, 2);
    var account = subjectId.substr(2, 2);
    var type = subjectId.substr(4, 1);
    var subjectDetailId = subjectId.substr(5, 4);
    var handlerCode = subjectId.substr(0, 7);
    var amount = bodyNode.amount;
    var orderId = bodyNode.orderId;
    var entityId = bodyNode.entityId;
    var timeStamp = new Date().getTime();
    var mlTable = dc.main.get("moneylog");
    var moneylog = {id:digestUtil.createUUID(), handlerCode:handlerCode, operationCode:subjectId,
    subject:subject.name, orderId:orderId, userId:'ADMIN', createTimeStamp:timeStamp,
    acceptTimeStamp:timeStamp, fromAccountCode:'', fromEntityId:'', amount:amount,
    toAccountCode:'', toEntityId:'', status:0};
    if(type == '1')
    {
        amount = amount*(-1);
    }
    //机构账户操作
    if(role == 'RS')
    {
        stationService.money({code:entityId}, amount, function(err, station){
            if(err)
            {
                cb(err);
            }
            else
            {
                moneylog.stateBefore = station.balance - amount;
                moneylog.stateAfter = station.balance;
                moneylog.fromEntityId = station.id;
                moneylog.toEntityId = station.id;
                mlTable.save(moneylog, [], function(err, data){
                    cb(err, backBodyNode);
                });
            }
        });
    }
    else if(role == 'RU')
    {
        cb(null, backBodyNode);
    }
};

/**
 * 修改渠道再cache中的密钥
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD10 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var table = dc.mg.get("stInfo");
    table.update(bodyNode.cond, bodyNode.data, [], function(err, data){
        if(err)
        {
            cb(ec.E0999);
        }
        else
        {
            log.info(data);
            cb(err, backBodyNode);
        }
    });
};

/**
 * 票据重新加入算奖队列
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD11 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var cols = {amount:1, gameCode:1, status:1, version:1, orderId:1,
        termCode:1, numbers:1, createTime:1, printTime:1, channelCode:1,
        playTypeCode:1, betTypeCode:1, stationId:1, multiple:1,
        printerStationId:1, rNumber:1};
    var ticketTable = dc.main.get("tticket");
    var cursor = ticketTable.find({id:bodyNode.id}, cols);
    cursor.dateToString();
    cursor.toArray(function(err, data) {
        if (data && data.length > 0)
        {
            queenSer.ticketSuc(data[0], function(err, data){
                cb(null, backBodyNode);
            });
        }
        else
        {
            cb(errCode.E3001, backBodyNode);
        }
    });
};

/**
 * 删除成功队列
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD12 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var cond = bodyNode.cond;
    var gameCode = bodyNode.gameCode;
    var colName = 'term_success_ticket_' + gameCode;
    var table = dc.mg.getConn().collection(colName);
    table.remove(cond, [], function(err, data){
        cb(err, backBodyNode);
    });
};

/**
 * 订单直接成功
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD13 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var orderId = bodyNode.id;
    var ticketTable = dc.main.get("tticket");
    async.waterfall([
        //先把所有票取出来
        function(cb)
        {
            var cols = {id:1, status:1, rNumber:1, channelCode:1, terminalId:1, version:1};
            var cond = {orderId:orderId};
            var cursor = ticketTable.find(cond, cols);
            cursor.dateToString();
            cursor.toArray(function(err, data){
                cb(err, data);
            });
        },
        //遍历所有的票
        function(tickets, cb)
        {
            async.eachSeries(tickets, function(ticket, callback) {
                if(ticket.status == ticketStatus.waiting_print || ticket.status == ticketStatus.take_away)
                {
                    ticket.status = ticketStatus.print_success;
                    ticketSer.printBack(ticket, function(err, data){
                        callback();
                    });
                }
                else
                {
                    callback();
                }
            }, function(err){
                cb(null, tickets);
            });
        },
        function(tickets, cb)
        {
            async.eachSeries(tickets, function(ticket, callback) {
                if(ticket.status != ticketStatus.print_success)
                {
                    //保存到算奖队列
                    queenSer.ticketSuc(ticket, function(err, data){
                        //增加订单成功数目
                        orderSer.incSuccessTicketCount(orderId, function(err, order){
                            callback();
                        });
                    })
                }
                else
                {
                    //增加订单成功数目
                    orderSer.incSuccessTicketCount(orderId, function(err, order){
                        callback();
                    });
                }
            }, function(err){
                cb(null, tickets);
            });
        },
        function(tickets, cb)
        {
            var cols = {id:1, termCode:1, schemeId:1, gameCode:1, outerId:1, amount:1,
                ticketCount:1, bonus:1, acceptTime:1, status:1,
                multiple:1, numbers:1, version:1, printCount:1, printFailCount:1, printTime:1};
            var orderTable = dc.main.get("torder");
            orderTable.findOne({id:orderId}, cols, [], function(err, order){
                order.tickets = tickets;
                cb(null, order);
            }, {dateToString:true});
        },
        function(torder, cb)
        {
            for(var key in torder.tickets)
            {
                var set = torder.tickets[key];
                delete set.version;
                delete set.status;
                delete set.printTime;
            }
            notifySer.sendOrder(torder, function(err, data){
                cb(err)
            });
        }
    ], function (err) {
        cb(err, backBodyNode);
    });
};

/**
 * 再次发送通知
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD14 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var orderId = bodyNode.id;
    var ticketTable = dc.main.get("tticket");
    async.waterfall([
        //先把所有票取出来
        function(cb)
        {
            var cols = {id:1, rNumber:1, channelCode:1, terminalId:1};
            var cond = {orderId:orderId};
            var cursor = ticketTable.find(cond, cols);
            cursor.dateToString();
            cursor.toArray(function(err, data){
                cb(err, data);
            });
        },
        function(tickets, cb)
        {
            var cols = {id:1, termCode:1, schemeId:1, gameCode:1, outerId:1, amount:1,
                ticketCount:1, bonus:1, acceptTime:1, status:1,
                multiple:1, numbers:1, version:1, printCount:1, printFailCount:1, printTime:1};
            var orderTable = dc.main.get("torder");
            orderTable.findOne({id:orderId}, cols, [], function(err, order){
                order.tickets = tickets;
                cb(null, order);
            }, {dateToString:true});
        },
        function(torder, cb)
        {
            notifySer.sendOrder(torder, function(err, data){
                cb(err)
            });
        }
    ], function (err) {
        cb(err, backBodyNode);
    });
};


/**
 * 修改通知地址
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD15 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var table = dc.mg.get("notify_channel_all");
    var cond = bodyNode.cond;
    var data = bodyNode.data;
    table.update(cond, data, {upsert:true}, function(err, data){
        cb(err, backBodyNode);
    });
};

/**
 * 删除已经发送的通知
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD16 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var colName = 'notify_queen_' + bodyNode.id;
    var table = dc.mg.getConn().collection(colName);
    table.remove({status:notifyMsgStatus.used}, [], function(err, data){
        cb(err, backBodyNode);
    });
};

/**
 * 对目标票据进行退款
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD17 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var id = bodyNode.id;
    var table = dc.main.get("tticket");
    var cond = {id:id};
    var data = {$set:{status:ticketStatus.refunded}};
    table.update(cond, data, [], function(err, data){
        cb(err, backBodyNode);
    });
};

/**
 * 对目标票据打印失败
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD18 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var id = bodyNode.id;
    var table = dc.main.get("tticket");
    var cond = {id:id};
    var data = {$set:{status:ticketStatus.print_failure}};
    table.update(cond, data, [], function(err, data){
        cb(err, backBodyNode);
    });
};

/**
 * 添加接受通知的渠道
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
AdminControl.prototype.handleAD19 = function(user, headNode, bodyNode, cb)
{
    var backBodyNode = {};
    var data = bodyNode.data;
    data.url = 'http://' + data.notifyIp + ':' + data.notifyPort + data.notifyPath;
    var table = dc.mg.get("notify_channel_all");
    table.save(data, [], function(err, data){
        cb(err, backBodyNode);
    });
};

var adminControl = new AdminControl();
module.exports = adminControl;