var dao = require('mcp_dao');
var dc = dao.dc;

var esut = require('easy_util');
var digestUtil = esut.digestUtil;

var cons = require('mcp_cons');
var userType = cons.userType;

var AdminPageControl = function(){};

AdminPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    console.log(bodyNode);
    var self = this;
    var cmd = headNode.cmd;
    self[cmd[1]](headNode, bodyNode, cb);
};


AdminPageControl.prototype.login = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"login", tip:"Welcome to login at my website."};
    cb(null, backBodyNode);
};

AdminPageControl.prototype.showUserType = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"show user type"};
    var userTypeTable = dc.main.get("userType");
    userTypeTable.find({}, {name:1}).toArray(function(err,data){
        backBodyNode.rst = data;
        //backBodyNode.data = JSON.parse(digestUtil.check({digestType:'3des-empty'}, null, bodyNode.data));
        cb(null, backBodyNode);
    });
};

AdminPageControl.prototype.selectOperation = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"select operation"};
    var operationTable = dc.main.get("operation");
    operationTable.find({}, {name:1, url:1, parentId:1}).toArray(function(err,data){
        backBodyNode.rst = data;
        backBodyNode.data = JSON.parse(digestUtil.check({digestType:'3des-empty'}, digestUtil.getEmptyKey(), bodyNode.data));
        cb(null, backBodyNode);
    });
};

AdminPageControl.prototype.selectUserType = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"select user type"};
    backBodyNode.rst = userType.getInfoById();
    var fromData = JSON.parse(digestUtil.check({digestType:'3des-empty'}, digestUtil.getEmptyKey(), bodyNode.data));
    if(fromData[0])
    {
        backBodyNode.selectedId = fromData[0]._id;
    }
    else
    {
        backBodyNode.selectedId = backBodyNode.rst[0]._id;
    }
    cb(null, backBodyNode);
};

AdminPageControl.prototype.showOperation = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"show operation"};
    var operationTable = dc.main.get("operation");
    operationTable.find({parentId:{$lt:0}}, {name:1, parentId:1, hasChildren:1}).toArray(function(err,data){
        if(err) cb(err, {});
        backBodyNode.rst = data;
        cb(null, backBodyNode);
    });
};

AdminPageControl.prototype.addOperation = function(headNode, bodyNode, cb)
{
    cb(null, {});
};

AdminPageControl.prototype.setOperation = function(headNode, bodyNode, cb)
{
    var self = this;
    cb(null, {});
};

AdminPageControl.prototype.index = function(headNode, bodyNode, cb)
{
    var self = this;
    cb(null, {});
};

AdminPageControl.prototype.top = function(headNode, bodyNode, cb)
{
    var self = this;
    cb(null, {});
};

AdminPageControl.prototype.left = function(headNode, bodyNode, cb)
{
    var self = this;
    cb(null, {});
};

AdminPageControl.prototype.main = function(headNode, bodyNode, cb)
{
    var self = this;
    cb(null, {});
};

var adminPageControl = new AdminPageControl();
module.exports = adminPageControl;