var async = require('async');

var dao = require('mcp_dao');
var dc = dao.dc;

var config = require("mcp_config");
var ec = config.ec;

var esut = require("easy_util");
var log = esut.log;
var dateUtil = esut.dateUtil;

var cons = require('mcp_cons');
var termStatus = cons.termStatus;

var transaction = require('./Transaction.js');

var TermService = function(){};

/**
 * 期次开奖
 */
TermService.prototype.draw = function(term, cb) {
    var self = this;
    var table = dc.main.get("term");
    transaction.run(function(wCb){
        async.waterfall([
            //获取目标期次
            function(cb)
            {
                var cond = {id:term.id};
                table.findOne(cond, {status:1, version:1}, [], function(err, data){
                    if(data == null)
                    {
                        err = "term " + term.id + " not exits......";
                    }
                    cb(err, data);
                });
            },
            //校验状态
            function(backTerm, cb){
                if(backTerm.status != termStatus.WAITING_DRAW_NUMBER)
                {
                    cb("term status not suitable");
                }
                else
                {
                    cb(null, backTerm)
                }
            },
            //更新期次状态
            function(backTerm, cb){
                var cond = {id:backTerm.id, version:backTerm.version};
                backTerm.version++;
                backTerm.status = termStatus.DRAW;
                var data = {$set:{version:backTerm.version, status:backTerm.status}};
                table.update(cond, data, [], function(err, data){
                    if(err || data.affectedRows != 1)
                    {
                        cb(ec.E9999);
                    }
                    else
                    {
                        cb(ec.E0000, backTerm);
                    }
                });
            }
        ], function (err, result) {
            wCb(err, result);
        });
    }, function(err, data){
        cb(err, data);
    });
};

/**
 * 获取指定游戏需要算奖的期次
 * @param gameCode
 */
TermService.prototype.findToCheck = function(gameCode, cb)
{
    var self = this;
    var table = dc.main.get("term");
    async.waterfall([
        //获取状态为已经开奖的期次的第一期
        function(cb)
        {
            var cond = {gameCode:gameCode, status:termStatus.DRAW};
            var cols = {
                gameCode:1, code:1, status:1, version:1,
                winningNumber:1, prizeDesc:1
            };
            table.findOne(cond, cols, [], function(err, data){
                if(data)
                {
                    cb(null, data);
                }
                else
                {
                    cb("no terms of " + gameCode + " to check!", null);
                }
            });
        },
        //更新状态
        function(termToCheck, cb)
        {
            var cond = {id:termToCheck.id, version:termToCheck.version};
            termToCheck.version++;
            termToCheck.status = termStatus.IN_CALCULATE;
            var data = {
                $set:{
                    version:termToCheck.version, status:termToCheck.status
                }
            };
            table.update(cond, data, [], function(err, data){
                if(data != undefined && data != null && data.affectedRows == 1)
                {
                    cb(null, termToCheck);
                }
                else
                {
                    cb("no terms of " + gameCode + " to check!", null);
                }
            });
        }
    ], function (err, termToCheck) {
        cb(err, termToCheck)
    });
}

module.exports = new TermService();