var async = require('async');

var config = require('mcp_config');
var prop = config.prop;
var ec = config.ec;

var cons = require('mcp_cons');
var orderStatus = cons.orderStatus;
var notifyMsgStatus = cons.notifyMsgStatus;

var transaction = require('./Transaction.js');

var dao = require('mcp_dao');
var dc = dao.dc;

var esut = require("easy_util");
var log = esut.log;
var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;

var kvService = require('./KvService.js');

var NotifyService = function(){};

/**
 * 发送订单通知
 * @param order
 * @param cb
 */
NotifyService.prototype.sendOrder = function(order, cb)
{
    var table = dc.mg.get("notify_channel_all");
    var channelCode = order.tickets[0].channelCode;
    var cond = {_id:channelCode};
    table.findOne(cond, {}, [], function(err, nc){
        if(nc)
        {
            delete order.version;
            delete order.printCount;
            delete order.printFailCount;
            order.acceptTime = dateUtil.toOldTime(order.acceptTime);
            order.printTime = dateUtil.toOldTime(order.printTime);
            var headNode = {ver:'s.1.01', id:digestUtil.createUUID(), timestamp:dateUtil.getOldCurTime(),
                channelCode:channelCode, cmd:'N02', digestType:'md5'};
            var bodyNode = {};
            bodyNode.repCode = ec.E0000.repCode;
            bodyNode.description = ec.E0000.description;
            bodyNode.order = order;
            var bodyStr = JSON.stringify(bodyNode);
            var encodedBodyStr = digestUtil.generate(headNode, nc.key, bodyStr);
            var msgNode = {head:headNode, body:encodedBodyStr};
            log.info("保存要发送的通知.................");
            log.info(msgNode);

            kvService.getNotifyQueenId(function(err, data){
                if(data)
                {
                    var msg = JSON.stringify(msgNode);
                    var hId = digestUtil.md5(msg);
                    var notifyMsg = {_id:data.value, hId:hId, msg:msg, status:notifyMsgStatus.unused};
                    notifyMsg.createTime = new Date();

                    var colName = 'notify_queen_' + channelCode;
                    var table = dc.mg.getConn().collection(colName);
                    table.save(notifyMsg, [], function(err, data){
                        cb(err, null);
                    });
                }
                else
                {
                    cb(err, null);
                }
            });
        }
        else
        {
            cb(null, null);
        }
    });
};

NotifyService.prototype.sendTerm = function(term, cb)
{
    var self = this;
    async.waterfall([
        //查找所有要发送的渠道
        function(cb)
        {
            var table = dc.mg.get("notify_channel_all");
            var cursor = table.find({}, {}, []);
            cursor.toArray(function(err, data){
                cb(err, data);
            })
        },
        //发送通知
        function(chs, cb)
        {
            async.eachSeries(chs, function(channel, callback) {
                self.sendTermToChannel(term, channel, function(err, data){
                    callback(err);
                })
            }, function(err){
                cb(err, null);
            });
        }
    ], function (err, rst) {
        cb(err, rst);
    });
}

/**
 * 发送期次通知给目标渠道
 * @param term
 * @param channel
 * @param cb
 */
NotifyService.prototype.sendTermToChannel = function(term, channel, cb)
{
    var self = this;
    async.waterfall([
        //生成msg
        function(cb)
        {
            var headNode = {ver:'s.1.01', id:digestUtil.createUUID(), timestamp:dateUtil.getOldCurTime(),
                channelCode:channel._id, cmd:'N01', digestType:'md5'};
            var bodyNode = {};
            bodyNode.repCode = ec.E0000.repCode;
            bodyNode.description = ec.E0000.description;
            bodyNode.term = {
                id:term.id, code:term.code, nextCode:term.nextCode, name:term.name,
                gameCode:term.gameCode, prizePool:term.prizePool,
                winningNumber:term.winningNumber, status:term.status,
                detailInfo:term.detailInfo, concedePoints:term.concedePoints
            };
            bodyNode.term.openTime = dateUtil.toOldTime(term.openTime);
            bodyNode.term.endTime = dateUtil.toOldTime(term.endTime);
            bodyNode.term.matchTime = dateUtil.toOldTime(term.matchTime);
            if(term.tip)
            {
                bodyNode.tip = term.tip;
            }
            else
            {
                bodyNode.tip = null;
            }
            var bodyStr = JSON.stringify(bodyNode);
            var encodedBodyStr = digestUtil.generate(headNode, channel.key, bodyStr);
            var msgNode = {head:headNode, body:encodedBodyStr};
            log.info("保存要发送的通知.................");
            log.info(msgNode);
            cb(null, msgNode);
        },
        //生成id
        function(msgNode, cb)
        {
            kvService.getNotifyQueenId(function(err, data){
                var msg = JSON.stringify(msgNode);
                var hId = digestUtil.md5(msg);
                var notifyItem = {_id:data.value, hId:hId, msg:msg, status:notifyMsgStatus.unused};
                notifyItem.createTime = new Date();

                cb(err, notifyItem);
            });
        },
        //发送通知
        function(notifyItem, cb)
        {
            var colName = 'notify_queen_' + channel._id;
            var table = dc.mg.getConn().collection(colName);
            table.save(notifyItem, [], function(err, data){
                cb(err, null);
            });
        }
    ], function (err, rst) {
        cb(err, rst);
    });
}

module.exports = new NotifyService();