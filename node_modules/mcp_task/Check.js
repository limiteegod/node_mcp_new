var async = require('async');

var dc = require('mcp_dao').dc;

var esut = require("easy_util");
var log = esut.log;

var ssq = require('mcp_ssq').ssq;

/**
 * 算奖的任务类
 * @param term  要算奖的期次
 * @constructor
 */
var Check = function(term, gl){
    var self = this;
    self.term = term;
    var gameGrades = [];
    var grades = gl.grades;
    for(var i = 0; i < grades.length; i++)
    {
        var grade = grades[i];
        gameGrades[grade.gLevel - 1] = grade.bonus;
    }
    var gl = ssq.gl(gameGrades.length);
    gl.setBonus(gameGrades);

    var check = ssq.check();
    check.setDrawNum(term.winningNumber);
    check.setGl(gl);
    self.check = check;
}

Check.prototype.run = function()
{
    var self = this;
    var term = self.term;
    var colName = 'term_draw_ticket_' + term.gameCode + "_" + term.code;
    var conn = dc.mg.getConn();
    var table = conn.collection(colName);

    //已经算奖票据的缓存队列
    var ticketColName = 'check_ticket_' + term.gameCode + "_" + term.code;
    var ticketTable = conn.collection(ticketColName);

    var hasNext = true;
    async.whilst(
        function () { return hasNext;},
        function (callback) {
            table.findAndRemove({}, {}, [], function(err, ticket){
                if(err)
                {
                    callback(err);
                    return;
                }
                if(ticket)
                {
                    var bonusDetail = self.handleOne(ticket);
                    async.waterfall([
                        //找到对应的订单
                        function(cb)
                        {
                            var orderTable = dc.main.get("torder");
                            var cols = {type:1};
                            orderTable.findOne({id:ticket.orderId}, cols, [], function(err, data){
                                cb(null, data);
                            });
                        },
                        //保存到已算奖缓存队列
                        function(order, cb)
                        {
                            var object = {_id:ticket._id, bonus:bonusDetail.bonus, bonusBeforeTax:bonusDetail.bonusBeforeTax,
                            dNumber:term.winningNumber, channelCode:ticket.channelCode, amount:ticket.amount, type:order.type,
                            printStationId:ticket.printerStationId};
                            ticketTable.save(object, function(err, data){
                                cb(err);
                            });
                        }
                    ], function (err, rst) {
                        callback(err);
                    });
                }
                else
                {
                    hasNext = false;
                    callback();
                }
            });
        },
        function (err) {
            log.info("算奖任务执行结果---------------");
            log.info(err);
        }
    );
}

/**
 * 对一张票据进行算奖
 */
Check.prototype.handleOne = function(ticket)
{
    var self = this;
    var metho = 'count' + ticket.playTypeCode + ticket.betTypeCode;
    var bonusDetail = self.check[metho]({number:ticket.numbers});
    return bonusDetail;
}


module.exports = Check;