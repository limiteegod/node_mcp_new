var async = require('async');

var dc = require('mcp_dao').dc;

var esut = require("easy_util");
var log = esut.log;

var cons = require('mcp_cons');
var schemeType = cons.schemeType;
var termReportType = cons.termReportType;

var fac = require('mcp_factory');
var checkFac = fac.checkFac;

/**
 * 算奖的任务类
 * @param term  要算奖的期次
 * @constructor
 */
var Check = function(term, gl){
    var self = this;
    self.term = term;
    var check = checkFac.getByGameCode(term, gl);
    self.check = check;
}

Check.prototype.checkTicket = function(cb)
{
    var self = this;
    var term = self.term;
    var colName = 'term_draw_ticket_' + term.gameCode + "_" + term.code;
    var conn = dc.mg.getConn();
    var table = conn.collection(colName);

    //已经算奖票据的缓存队列
    var ticketColName = 'check_ticket_' + term.gameCode + "_" + term.code;
    var ticketTable = conn.collection(ticketColName);

    //已经算奖订单的缓存队列
    var orderColName = 'check_order_' + term.gameCode + "_" + term.code;
    var orderTable = conn.collection(orderColName);

    //已经算奖方案的缓存队列
    var schemeColName = 'check_scheme_' + term.gameCode + "_" + term.code;
    var schemeTable = conn.collection(schemeColName);

    var hasNext = true;
    async.whilst(
        function () { return hasNext;},
        function (callback) {
            table.findAndRemove({}, {}, [], function(err, ticket){
                if(err)
                {
                    callback(err);
                    return;
                }
                if(ticket)
                {
		    log.info(ticket);
                    var bonusDetail = self.handleOne(ticket);
                    async.waterfall([
                        //找到对应的订单
                        function(cb)
                        {
                            var orderTable = dc.main.get("torder");
                            var cols = {type:1, ticketCount:1, bonus:1, bonusBeforeTax:1, dNumber:1,
                            channelCode:1, finishedTicketCount:1, ticketCount:1, customerId:1,
                            stationId:1, schemeType:1, amount:1, outerId:1, schemeId:1};
                            orderTable.findOne({id:ticket.orderId}, cols, [], function(err, data){
                                cb(null, data);
                            });
                        },
                        //保存票据到已算奖缓存队列
                        function(order, cb)
                        {
                            var object = {_id:ticket._id, bonus:bonusDetail.bonus, bonusBeforeTax:bonusDetail.bonusBeforeTax,
                            dNumber:term.winningNumber, channelCode:ticket.channelCode, amount:ticket.amount, type:order.type,
                            printStationId:ticket.printerStationId};
                            ticketTable.save(object, function(err, data){
                                cb(err, order);
                            });
                        },
                        //保存订单到已算奖缓存队列
                        function(order, cb)
                        {
                            var cond = {_id:order.id};
                            var data = {
                                $set:{
                                    type:order.type,
                                    dNumber:term.winningNumber,
                                    channelCode:order.channelCode,
                                    finishedTicketCountInDb:order.finishedTicketCount,
                                    ticketCountInDb:order.ticketCount,
                                    customerId:order.customerId,
                                    stationId:order.stationId,
                                    schemeType:order.schemeType,
                                    amount:order.amount,
                                    outerId:order.outerId
                                },
                                $inc:
                                {
                                    ticketCount:1,
                                    bonus:bonusDetail.bonus,
                                    bonusBeforeTax:bonusDetail.bonusBeforeTax
                                }
                            };
                            orderTable.update(cond, data, {upsert:true}, function(err, data){
                                cb(err, order);
                            });
                        },
                        //保存方案到缓存队列
                        function(order, cb)
                        {
                            if(order.schemeType != schemeType.none)
                            {
                                var cond = {_id:order.schemeId};
                                var data = {
                                    $set:{
                                        schemeType:order.schemeType,
                                        channelCode:order.channelCode
                                    },
                                    $inc:{
                                        orderCount:1,
                                        bonus:bonusDetail.bonus,
                                        bonusBeforeTax:bonusDetail.bonusBeforeTax
                                    }
                                };
                                schemeTable.update(cond, data, {upsert:true}, function(err, data){
                                    cb(err);
                                });
                            }
                            else    //无方案，不需要处理
                            {
                                cb(null);
                            }
                        }
                    ], function (err, rst) {
                        callback(err);
                    });
                }
                else
                {
                    hasNext = false;
                    callback();
                }
            });
        },
        function (err) {
            log.info("对所有票据算奖,执行结果---------------");
            log.info(err);
            cb(err, null);
        }
    );
}

/**
 * 生成算奖统计信息
 */
Check.prototype.generateInfo = function(cb)
{
    var self = this;
    var term = self.term;
    async.waterfall([
        //统计票据级别数据
        function(cb)
        {
            var reduce = function(curr, result)
            {
                result.bonus += curr.bonus;
                result.bonusBeforeTax += curr.bonusBeforeTax;
                if(curr.bonus > 0)
                {
                    result.hitCount++;
                    result.hitAmount += curr.amount;
                }
                else{
                    result.notHitCount++;
                    result.notHitAmount += curr.amount;
                }
            }
            var ticketColName = 'check_ticket_' + term.gameCode + "_" + term.code;
            var conn = dc.mg.getConn();
            var cmd = {
                group:{
                    ns:ticketColName,
                    key:{channelCode:1, type:1},
                    cond:{},
                    $reduce: reduce + '',
                    initial:{
                        hitCount:0,
                        hitAmount:0,
                        notHitCount:0,
                        notHitAmount:0,
                        bonus:0,
                        bonusBeforeTax:0
                    }
                }
            };
            conn.command(cmd, {}, function(err, data){
                if(data && data.retval)
                {
                    self.saveTicketInfo(data.retval, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(err);
                }
            });
        },
        //统计中奖订单级别数据
        function(cb)
        {
            var reduce = function(curr, result)
            {
                result.bonus += curr.bonus;
                result.bonusBeforeTax += curr.bonusBeforeTax;
                if(curr.bonus > 0)
                {
                    result.hitCount++;
                    result.hitAmount += curr.amount;
                }
                else{
                    result.notHitCount++;
                    result.notHitAmount += curr.amount;
                }
            }
            var orderColName = 'check_order_' + term.gameCode + "_" + term.code;
            var conn = dc.mg.getConn();
            var cmd = {
                group:{
                    ns:orderColName,
                    key:{channelCode:1, type:1},
                    cond:{},
                    $reduce: reduce + '',
                    initial:{
                        hitCount:0,
                        hitAmount:0,
                        notHitCount:0,
                        notHitAmount:0,
                        bonus:0,
                        bonusBeforeTax:0
                    }
                }
            };
            conn.command(cmd, {}, function(err, data){
                if(data && data.retval)
                {
                    self.saveOrderInfo(data.retval, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(err);
                }
            });
        },
        //出票中心角度统计订单中奖信息
        function(cb)
        {
            var reduce = function(curr, result)
            {
                result.bonus += curr.bonus;
                result.bonusBeforeTax += curr.bonusBeforeTax;
                if(curr.bonus > 0)
                {
                    result.hitCount++;
                    result.hitAmount += curr.amount;
                }
                else{
                    result.notHitCount++;
                    result.notHitAmount += curr.amount;
                }
            }
            var ticketColName = 'check_ticket_' + term.gameCode + "_" + term.code;
            var conn = dc.mg.getConn();
            var cmd = {
                group:{
                    ns:ticketColName,
                    key:{printStationId:1},
                    cond:{},
                    $reduce: reduce + '',
                    initial:{
                        hitCount:0,
                        hitAmount:0,
                        notHitCount:0,
                        notHitAmount:0,
                        bonus:0,
                        bonusBeforeTax:0
                    }
                }
            };
            conn.command(cmd, {}, function(err, data){
                if(data && data.retval)
                {
                    self.saveTicketPrintInfo(data.retval, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(err);
                }
            });
        }
    ], function (err, rst) {
        log.info("生成算奖的统计信息,执行结果---------------");
        log.info(err);
        cb(err, null);
    });
}



/**
 * 对一张票据进行算奖
 */
Check.prototype.handleOne = function(ticket)
{
    var self = this;
    var metho = 'count' + ticket.playTypeCode + ticket.betTypeCode;
    var bonusDetail = self.check[metho]({number:ticket.numbers});
    return bonusDetail;
}

/**
 * 保存算奖票据信息
 */
Check.prototype.saveTicketInfo = function(data, cb)
{
    var self = this;
    var term = self.term;
    var colName = "term_report";
    var conn = dc.mg.getConn();
    var table = conn.collection(colName);
    async.eachSeries(data, function(rpt, callback) {
        log.info(rpt);
        //var id = term.gameCode + "_" + term.code + "_" + rpt.channelCode + "_" + termReportType.sale + "_" + rpt.type;
        var cond = {gameCode:term.gameCode, termCode:term.code, channelCode:rpt.channelCode, type:rpt.type, rptType:termReportType.sale};
        var data = {
            $set:{
                ticketHitCount:rpt.hitCount,
                ticketHitAmount:rpt.hitAmount,
                ticketHitBonus:rpt.bonus,
                ticketHitBonusBeforeTax:rpt.bonusBeforeTax,
                ticketNotHitCount:rpt.notHitCount,
                ticketNotHitAmount:rpt.notHitAmount
            }
        }
        table.update(cond, data, {upsert:true}, function(err, data){
            callback(err);
        });
    }, function(err){
        cb(err, null);
    });
}

/**
 * 保存算奖票据信息（出票角度）
 */
Check.prototype.saveTicketPrintInfo = function(data, cb)
{
    var self = this;
    var term = self.term;
    var colName = "term_report";
    var conn = dc.mg.getConn();
    var table = conn.collection(colName);
    async.eachSeries(data, function(rpt, callback) {
        log.info(rpt);
        //var id = term.gameCode + "_" + term.code + "_" + rpt.printStationId + "_" + termReportType.print + "_" + rpt.type;
        var cond = {gameCode:term.gameCode, termCode:term.code, channelCode:rpt.printStationId, rptType:termReportType.print};
        var data = {
            $set:{
                ticketHitCount:rpt.hitCount,
                ticketHitAmount:rpt.hitAmount,
                ticketHitBonus:rpt.bonus,
                ticketHitBonusBeforeTax:rpt.bonusBeforeTax,
                ticketNotHitCount:rpt.notHitCount,
                ticketNotHitAmount:rpt.notHitAmount
            }
        }
        table.update(cond, data, {upsert:true}, function(err, data){
            callback(err);
        });
    }, function(err){
        cb(err, null);
    });
}

/**
 * 保存算奖订单信息
 */
Check.prototype.saveOrderInfo = function(data, cb)
{
    var self = this;
    var term = self.term;
    var colName = "term_report";
    var conn = dc.mg.getConn();
    var table = conn.collection(colName);
    async.eachSeries(data, function(rpt, callback) {
        log.info(rpt);
        //var id = term.gameCode + "_" + term.code + "_" + rpt.channelCode + "_" + termReportType.sale + "_" + rpt.type;
        var cond = {gameCode:term.gameCode, termCode:term.code, channelCode:rpt.channelCode, type:rpt.type, rptType:termReportType.sale};
        var data = {
            $set:
            {
                orderHitCount:rpt.hitCount,
                orderHitAmount:rpt.hitAmount,
                orderHitBonus:rpt.bonus,
                orderHitBonusBeforeTax:rpt.bonusBeforeTax,
                orderNotHitCount:rpt.notHitCount,
                orderNotHitAmount:rpt.notHitAmount
            }
        }
        table.update(cond, data, {upsert:true}, function(err, data){
            callback(err);
        });
    }, function(err){
        cb(err, null);
    });
}

module.exports = Check;
